import 'package:flutter/material.dart';
import 'dart:async';

final Map<String, List<Map<String, String>>> questionData = {
  'animals': [
    {'hint': '‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏á‡∏ß‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà', 'answer': '‡∏ä‡πâ‡∏≤‡∏á'},
    {'hint': '‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏Ç‡πà‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≠‡∏á "‡∏Å‡πä‡∏≤‡∏ö ‡πÜ"', 'answer': '‡πÄ‡∏õ‡πá‡∏î'},
    {'hint': '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÑ‡∏•‡πà‡∏à‡∏±‡∏ö‡∏´‡∏ô‡∏π', 'answer': '‡πÅ‡∏°‡∏ß'},
    {'hint': '‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥', 'answer': '‡∏°‡πâ‡∏≤‡∏•‡∏≤‡∏¢'},
    {'hint': '‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô‡πÑ‡∏ú‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å', 'answer': '‡πÅ‡∏û‡∏ô‡∏î‡πâ‡∏≤'},
  ],
  'plants': [
    {'hint': '‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏ß‡∏≤‡∏ô', 'answer': '‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®'},
    {'hint': '‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÉ‡∏ô‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢', 'answer': '‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏á‡πÄ‡∏û‡∏ä‡∏£'},
    {'hint': '‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏£‡πà‡∏°‡πÄ‡∏á‡∏≤', 'answer': '‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ'},
    {'hint': '‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ö‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 'answer': '‡πÇ‡∏´‡∏£‡∏∞‡∏û‡∏≤'},
    {'hint': '‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏™‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß', 'answer': '‡∏°‡∏∞‡∏ô‡∏≤‡∏ß'},
  ],
  'astronomy': [
    {'hint': '‡∏î‡∏≤‡∏ß‡∏§‡∏Å‡∏©‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô', 'answer': '‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå'},
    {'hint': '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡πà‡∏≥‡∏Ñ‡∏∑‡∏ô', 'answer': '‡∏î‡∏ß‡∏á‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå'},
    {'hint': '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á', 'answer': '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß'},
    {'hint': '‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ‡πÅ‡∏î‡∏á', 'answer': '‡∏î‡∏≤‡∏ß‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£'},
    {'hint': '‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞', 'answer': '‡∏î‡∏≤‡∏ß‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ'},
  ],
  'environment': [
    {'hint': '‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏¥‡∏ï‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©', 'answer': '‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ'},
    {'hint': '‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï', 'answer': '‡∏≠‡∏≤‡∏Å‡∏≤‡∏®'},
    {'hint': '‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏™‡πÄ‡∏Ñ‡πá‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£', 'answer': '‡∏ô‡πâ‡∏≥‡∏ó‡∏∞‡πÄ‡∏•'},
    {'hint': '‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏™‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå', 'answer': '‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏™‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå'},
    {'hint': '‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 'answer': '‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏™‡∏á'},
  ],
};

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô!',
              style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 30),
            GridView.count(
              crossAxisCount: 2,
              shrinkWrap: true,
              crossAxisSpacing: 20,
              mainAxisSpacing: 20,
              children: [
                _buildCategoryButton(context, 'üêæ ‡∏™‡∏±‡∏ï‡∏ß‡πå', 'animals'),
                _buildCategoryButton(context, 'üåø ‡∏û‡∏∑‡∏ä', 'plants'),
                _buildCategoryButton(context, 'üåå ‡∏î‡∏≤‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', 'astronomy'),
                _buildCategoryButton(context, 'üåé ‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°', 'environment'),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCategoryButton(BuildContext context, String title, String category) {
    return ElevatedButton(
      onPressed: () {
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => GameScreen2(category: category)),
        );
      },
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.deepPurple,
        padding: const EdgeInsets.symmetric(vertical: 20),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
        elevation: 5,
        shadowColor: Colors.black.withOpacity(0.3),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(title, style: const TextStyle(fontSize: 28, color: Colors.white)),
          const SizedBox(height: 10),
          Text(
            category,
            style: const TextStyle(fontSize: 16, color: Colors.white70),
          ),
        ],
      ),
    );
  }
}

class GameScreen2 extends StatefulWidget {
  final String category;
  const GameScreen2({super.key, required this.category});

  @override
  _GameScreen2State createState() => _GameScreen2State();
}

class _GameScreen2State extends State<GameScreen2> {
  final TextEditingController _controller = TextEditingController();
  int _currentQuestion = 0;
  int _score = 0;
  String _feedback = '';

  late List<Map<String, String>> _questions;

  @override
  void initState() {
    super.initState();
    _questions = questionData[widget.category] ?? [];
  }

  void _checkAnswer() {
    if (_controller.text.trim() == _questions[_currentQuestion]['answer']) {
      setState(() {
        _feedback = '‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!';
        _score += 10;
      });
      Future.delayed(Duration(seconds: 1), _nextQuestion);
    } else {
      setState(() {
        _feedback = '‚ùå ‡∏ú‡∏¥‡∏î! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠: ${_questions[_currentQuestion]['answer']}';
      });
    }
  }

  void _nextQuestion() {
    setState(() {
      _controller.clear();
      _feedback = '';
      if (_currentQuestion < _questions.length - 1) {
        _currentQuestion++;
      } else {
        _showFinalScore();
      }
    });
  }

  void _showFinalScore() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('‡∏à‡∏ö‡πÄ‡∏Å‡∏°!'),
        content: Text('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô $_score ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pop(context);
            },
            child: Text('‡∏ï‡∏Å‡∏•‡∏á'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${widget.category}')),
      body: Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: AssetImage('assets/image/14.jpg'), // Add your background image here
            fit: BoxFit.cover,
            colorFilter: ColorFilter.mode(Colors.black.withOpacity(0.3), BlendMode.darken),
          ),
        ),
        padding: const EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(_questions[_currentQuestion]['hint']!, style: TextStyle(fontSize: 24, color: Colors.white)),
            SizedBox(height: 20),
            TextField(controller: _controller, decoration: InputDecoration(
              labelText: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà',
              filled: true,
              fillColor: Colors.grey.shade200,
              border: OutlineInputBorder(),
            )),
            SizedBox(height: 20),
            ElevatedButton(onPressed: _checkAnswer, child: Text('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö')),
            SizedBox(height: 20),
            ElevatedButton(onPressed: _nextQuestion, child: Text('‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°')),
            SizedBox(height: 20),
            Text(_feedback, style: TextStyle(fontSize: 20, color: _feedback.contains('‚úÖ') ? Colors.green : Colors.red)),
          ],
        ),
      ),
    );
  }
}